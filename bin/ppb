import argparse
import configparser
import hashlib
import os
import shutil
import tempfile
import zipfile
from pathlib import Path


# todo fix case when space in filename
parser = argparse.ArgumentParser()
parser.add_argument('--zip_flag', '-zip_flag', action='store_true', dest='zip_flag',
                    help="zip folder and upload it. The folder to be zipped needs to be "
                         "after the flag -z. Example: ppb -z test")
parser.add_argument('file', type=str, help='file to upload and display')

config = configparser.ConfigParser()
config.read(os.path.expanduser('~/.config/ppb.conf'))
ppb_target_host = config['ppb_config']['PPB_TARGET_HOST'].replace("'", '')
ppb_path_on_host = config['ppb_config']['PPB_PATH_ON_HOST'].replace("'", '')
ppb_http_path = config['ppb_config']['PPB_HTTP_PATH'].replace("'", '')

flags = parser.parse_args()

if not ppb_target_host:
    print("ERROR: The PPB_TARGET_HOST variable is unset."
          "Nothing can be uploaded if there is no target host."
          "Please copy the example config file from under \"/etc/ppb.conf\" to \"~/.config/ppb.conf\","
          "and fill in the variable values according to your personal settings.")

# when running on host, ppb_http_path = ppb_path_on_host
if not ppb_http_path:
    ppb_http_path = ppb_path_on_host


def get_unique_str(prefix: str = '') -> str:
    from datetime import datetime
    dateTimeObj = datetime.now()
    dateStr = dateTimeObj.strftime("%Y_%m_%d_%H_%M_%S_%f")
    if prefix:
        return '_'.join([prefix, dateStr])
    else:
        return dateStr


file_path = Path(flags.file)
file_stem = get_unique_str(file_path.stem)
file_id = hashlib.md5(file_stem.encode('utf-8')).hexdigest()
dest_file = file_id[:12]
ext = file_path.suffix

# if zipping file, add .zip extension
dest_file += f'{ext}' + '.zip' * flags.zip_flag

in_file = dest_file

curl_command = f'curl -X POST --silent --output /dev/null --show-error ' \
               f'--fail http://109.202.220.6:5000/file/{in_file} -d filename={dest_file}'

if ppb_target_host == 'local':
    if flags.zip_flag:
        zip_command = f'zip -r {ppb_path_on_host}/{in_file} {file_path}'
        print(zip_command)
        os.system(zip_command)
    else:
        shutil.copyfile(file_path, os.path.join(ppb_path_on_host, dest_file))
else:
    with tempfile.TemporaryDirectory() as tmpdirname:
        if flags.zip_flag:
            print(f'zipping {file_path} to {os.path.join(tmpdirname, in_file)}')
            zipfile.ZipFile(f'{os.path.join(tmpdirname, in_file)}', mode='w').write(f'{file_path}')
            file_path = os.path.join(tmpdirname, in_file)
        rsync_command = f'rsync -avP {file_path} {ppb_target_host}:{ppb_path_on_host}/{dest_file}'
        print(rsync_command)
        os.system(rsync_command)

print(curl_command)
os.system(curl_command)
